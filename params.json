{"name":"Sprite-anim","tagline":"","body":"# sprite-anim\r\n\r\nsprite-anim is a simple spritesheet animation engine.\r\n\r\n### Installation\r\n`npm install sprite-anim --save`\r\n\r\n### Features\r\n- common API (play / pause / stop / gotoAndPlay / gotoAndStop / dispose)\r\n- initialize frames with data (JSONArrayParser), automatically with dimensions (SimpleParser) or your own custom parser\r\n- works with DOM elements (DOMRenderer), canvas element (CanvasRenderer), off-screen canvas (OffScreenCanvasRenderer) or your own custom renderer\r\n\r\n### Browser compatibility\r\nIE 6+ with DOM element, IE 9+ with DOM and canvas element.\r\nIf you need to support IE 8- use [es5-shim](https://github.com/es-shims/es5-shim) for EcmaScript 5 methods compatibility.\r\n\r\n## Documentation\r\n\r\n### Use\r\n#### Browserify\r\n```\r\nvar SpriteAnim = require('sprite-anim');\r\n````\r\n\r\n#### AMD\r\n```\r\nrequire(['sprite-anim.js'], function(SpriteAnim){\r\n});\r\n````\r\n\r\n#### Script tag\r\n```\r\n<script src=\"path/to/file/sprite-anim.js\"></script>\r\n<script>\r\n  // global variable SpriteAnim\r\n</script>\r\n````\r\n\r\n### Examples\r\n\r\n#### DOM element with spritesheet and frame dimensions\r\n\r\n```\r\nvar animElt = document.getElementById('anim');\r\nvar renderer = new SpriteAnim.DOMRenderer(animElt);\r\nvar parser = new SpriteAnim.SimpleParser({width: 1410, height: 3960}, {width: 470, height: 120});\r\nvar anim = new SpriteAnim(parser, renderer, {frameRate: 25});\r\n\r\nanim.play();\r\n```\r\n\r\n#### Canvas element with frames data\r\n\r\n```\r\nvar animElt = document.getElementById('anim');\r\nvar renderer = new SpriteAnim.CanvasRenderer(animElt);\r\nvar parser = new SpriteAnim.JSONArrayParser(framesData);\r\nvar anim = new SpriteAnim(parser, renderer, {frameRate: 25});\r\n\r\nanim.play();\r\n```\r\n\r\n### Parsers\r\n\r\n#### SimpleParser\r\nInitialize frames directly with spritesheet image dimensions and frame dimensions.\r\n\r\n##### Params\r\n- `spriteSize`: `Object` `{width: Number, height: Number}`\r\n- `frameSize`: `Object` `{width: Number, height: Number}`\r\n\r\n#### JSONArrayParser\r\nInitialize frames with an `Array` of frames data, following the TexturePacker JSONArray output.\r\n\r\n##### Params\r\n- `data`: `Object`\r\n- `scaleFactor` (optional): `Number`\r\n\r\n#### Custom parser\r\nYou can implement your own parser.\r\n\r\nA parser must have these properties :\r\n- `numFrames`: number of frames\r\n- `frames`: an array of frames `{x, y, index, width, height}`\r\n\r\n##### Example\r\n```\r\nvar CustomParser = function(framesData){\r\n  this.numFrames = 0;\r\n  this.frames = [];\r\n\r\n  // populate frames and increment numFrames\r\n};\r\n```\r\n\r\n\r\n### Renderers\r\n\r\n#### DOMRenderer\r\nRender frame with a DOM element (`background-position`).\r\n\r\n##### Params\r\n- `element`: DOM element\r\n\r\n#### CanvasRenderer\r\nRender frame with a `canvas` element (`drawImage`).\r\n\r\n##### Params\r\n- `canvas`: canvas element\r\n- `sprite`: `Image` spritesheet image\r\n- `options` (`Object`): \r\n  - `clearFrame` (`Boolean`): clear frame on render\r\n\r\n#### Custom renderer\r\nYou can implement your own renderer.\r\n\r\nA renderer must have a `render` method with a parameter `frame`.\r\nThere is an optionnal parameter `animation` which is the `SpriteAnim` instance.\r\nThe `frame` param is an `object` with properties `{x, y, index, width, height}`.\r\n\r\n##### Example\r\n```\r\nvar CustomRenderer = function(){\r\n};\r\n\r\nCustomRenderer.prototype.render = function(frame, animation){\r\n  // draw the frame\r\n};\r\n```\r\n\r\n### SpriteAnim\r\n\r\n\r\n#### create instance\r\n`new SpriteAnim(parser, renderer, options)`\r\n\r\n##### `options` (`Object`)\r\n- `frameRate` (`Number`)\r\nAnimation frame rate (default: `60`)\r\n- `loop` (`Boolean`)\r\nIf `true` loop animation (default: `false`)\r\n- `yoyo` (`Boolean`)\r\nIf `true` repeat from end when looping (default: `false`)\r\n- `numFrames` (`Boolean`)\r\nForce total frames\r\n- `manualUpdate` (`Boolean`)\r\nIf `true` the animation will not update itself. (default: `false`)\r\nYou'll have to update it manually with an explicit `onEnterFrame()` call on a custom render loop.\r\n\r\n\r\n#### properties\r\n\r\n##### `x` (`Number`)\r\nHorizontal position from the top left corner of the container. (default: 0)\r\n\r\n##### `y` (`Number`)\r\nVertical position from the top left corner of the container. (default: 0)\r\n\r\n##### `alpha` (`Number`)\r\nAlpha value of the animation. A value between 0 and 1. Currently only supported on canvas mode. (default: 1)\r\n\r\n##### `loop` (`Boolean`)\r\nIf `true` loop animation (default: `false`)\r\n\r\n##### `yoyo` (`Boolean`)\r\nIf `true` repeat from end when looping (default: `false`)\r\n\r\n\r\n##### `frameRate` (`Number`)\r\nAnimation frame rate\r\n\r\n##### `numFrames` (`Number`)\r\nTotal frames\r\n\r\n##### `currentFrame` (`Number`)\r\nCurrent frame index\r\n\r\n##### `isPlaying` (`Boolean`)\r\n`true` if animation currently playing\r\n\r\n##### `complete` (`Boolean`)\r\n`true` if animation complete\r\n\r\n\r\n#### methods\r\n\r\n##### `play()`\r\nPlay animation\r\n\r\n##### `pause()`\r\nPause animation\r\n\r\n##### `stop()`\r\nPause and reset animation (frame index = 0)\r\n\r\n##### `gotoAndPlay(frameIndex)`\r\nGo to a frame index and play animation\r\n\r\n##### `gotoAndStop(frameIndex)`\r\nGo to a frame index and pause animation\r\n\r\n##### `onEnterFrame(timeStamp)`\r\nCalled internally each frame.\r\nIf you add the `manualUpdate` option and call this method directly in a external render loop you have to pass a `timeStamp` argument (from the requestAnimationFrame callback).\r\n\r\n##### `renderFrame()`\r\nRender the current frame\r\n\r\n##### `dispose()`\r\nDispose SpriteAnim instance\r\n\r\n\r\n#### events\r\n\r\n##### `complete`\r\nDispatched when animation ended\r\n\r\n##### `enterFrame`\r\nDispatched on each frame\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}